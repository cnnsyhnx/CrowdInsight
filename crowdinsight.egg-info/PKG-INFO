Metadata-Version: 2.4
Name: crowdinsight
Version: 0.1.0
Summary: A Python AI library for crowd analysis from video streams
Home-page: https://github.com/yourusername/crowdinsight
Author: CrowdInsight Team
Author-email: your.email@example.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: opencv-python>=4.5.0
Requires-Dist: torch>=1.7.0
Requires-Dist: ultralytics>=8.0.0
Requires-Dist: numpy>=1.19.0
Requires-Dist: pandas>=1.2.0
Requires-Dist: pillow>=8.0.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

<p align="center">
  <img src="assets/CrowdInsight.png" alt="CrowdInsight Logo" width="1000px"/>
</p>

# CrowdInsight

**Know your crowd. Shape your space.**

CrowdInsight is a Python AI library that converts CCTV footage or live streams into meaningful insights. It detects and classifies entities like adults, children, men, women, and animals (e.g., dogs), tracks movement, and generates structured data for real-world applications ‚Äî from retail stores to government buildings.

---

## üìÅ Project Structure

```bash
CrowdInsight/
‚îÇ
‚îú‚îÄ‚îÄ crowdinsight/             # Core Python package
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ analyzer.py           # Main interface (CrowdAnalyzer class)
‚îÇ   ‚îú‚îÄ‚îÄ detector.py           # Object detection logic (YOLOv8, etc.)
‚îÇ   ‚îú‚îÄ‚îÄ tracker.py            # Person tracking module (DeepSORT, ByteTrack)
‚îÇ   ‚îú‚îÄ‚îÄ utils.py              # Helper functions
‚îÇ   ‚îú‚îÄ‚îÄ visualizer.py         # Draw boxes, labels, etc.
‚îÇ   ‚îî‚îÄ‚îÄ config.py             # Configuration settings
‚îÇ
‚îú‚îÄ‚îÄ examples/                 # Example scripts
‚îÇ   ‚îú‚îÄ‚îÄ analyze_video.py
‚îÇ   ‚îî‚îÄ‚îÄ analyze_live.py
‚îÇ
‚îú‚îÄ‚îÄ assets/                   # Branding, logos, sample media
‚îÇ   ‚îî‚îÄ‚îÄ CrowdInsight.png
‚îÇ
‚îú‚îÄ‚îÄ videos/                   # Sample video files (for local tests)
‚îÇ   ‚îî‚îÄ‚îÄ cctv.mp4
‚îÇ
‚îú‚îÄ‚îÄ outputs/                  # Output results (CSV, JSON, images)
‚îÇ   ‚îî‚îÄ‚îÄ output.csv
‚îÇ
‚îú‚îÄ‚îÄ tests/                    # Unit tests
‚îÇ   ‚îú‚îÄ‚îÄ test_analyzer.py
‚îÇ   ‚îú‚îÄ‚îÄ test_detector.py
‚îÇ   ‚îú‚îÄ‚îÄ test_tracker.py
‚îÇ   ‚îî‚îÄ‚îÄ test_utils.py 
‚îÇ
‚îú‚îÄ‚îÄ .gitignore                # Ignore files/folders for GitHub
‚îú‚îÄ‚îÄ LICENSE                   # Creative Commons Attribution-NoDerivatives 4.0 International Public License
‚îú‚îÄ‚îÄ README.md                 # Project overview and instructions
‚îú‚îÄ‚îÄ requirements.txt          # Required Python packages
‚îî‚îÄ‚îÄ setup.py                  # PyPI packaging file
```

---

## üöÄ Features

- üé• Video file & live webcam/IP stream support  
- üß† Real-time object detection and classification  
- üìç Visitor tracking using DeepSORT/ByteTrack  
- üìä Structured analytics export (CSV/JSON)  
- ‚öôÔ∏è Modular and extensible for custom use cases  

---

## üì¶ Installation

```bash
pip install crowdinsight
```

> ‚ö†Ô∏è Note: This project is currently in development and not yet on PyPI.

---

## üí° Example Usage

### ‚ñ∂Ô∏è Analyze a Video File

```python
from crowdinsight import CrowdAnalyzer

# Initialize the analyzer with a video file
analyzer = CrowdAnalyzer(
    video_source="videos/cctv.mp4",    # Video file path
    model_path="yolov8n.pt",           # YOLO model path
    conf_threshold=0.5,                # Detection confidence threshold
    show_video=True                    # Show real-time visualization
)

# Run analysis and get results
results = analyzer.run_analysis(output_path="outputs/results.json")

# Print summary
print(f"Total Visitors: {results['summary']['total_visitors']}")
print(f"Adults: {results['summary']['adults']}")
print(f"Children: {results['summary']['children']}")
print(f"Males: {results['summary']['males']}")
print(f"Females: {results['summary']['females']}")
print(f"Dogs: {results['summary']['dogs']}")

# Print hourly breakdown
print("\nHourly Breakdown:")
for hour, data in results['hourly_breakdown'].items():
    print(f"{hour}: {data['visitors']} visitors")
```

### üì° Analyze a Live Stream

```python
from crowdinsight import CrowdAnalyzer

# Initialize with webcam (0) or IP camera
analyzer = CrowdAnalyzer(
    video_source=0,                    # 0 for webcam, or RTSP URL for IP camera
    model_path="yolov8n.pt",
    conf_threshold=0.5,
    show_video=True
)

# Run live analysis
results = analyzer.run_live_stream()

# Export results if needed
analyzer.export_results("outputs/live_results.json")
```

### üñ•Ô∏è Command Line Usage

```bash
# For live stream analysis
python examples/analyze_live.py --source 0 --model yolov8n.pt --conf 0.5 --output results.json

# For video file analysis
python examples/analyze_video.py
```

### üéØ Key Features

- **Real-time Visualization**:
  - Bounding boxes with object IDs
  - Tracking trails showing movement history
  - FPS counter
  - Current statistics display
  - Press 'q' to quit

- **Detection & Tracking**:
  - Person detection and classification
  - Age estimation (adults/children)
  - Gender estimation (male/female)
  - Animal detection (dogs)
  - Object tracking with unique IDs

- **Analytics**:
  - Real-time visitor counting
  - Demographic breakdown
  - Hourly statistics
  - Movement patterns
  - Export to JSON/CSV

### üìã Requirements

```bash
# Core dependencies
opencv-python>=4.5.0
torch>=1.7.0
ultralytics>=8.0.0
numpy>=1.19.0
pandas>=1.2.0

# Optional dependencies
pillow>=8.0.0  # For image processing
```

---

## üß† Technology Stack

- YOLOv8 / YOLO-NAS (object detection)  
- DeepSORT / ByteTrack (object tracking)  
- Pre-trained CNNs (age/gender estimation)  
- OpenCV, PyTorch, Ultralytics  

---

## üìä Sample Output (JSON)

```json
{
  "timestamp": "2025-05-27T15:00:00",
  "summary": {
    "total_visitors": 73,
    "adults": 49,
    "children": 12,
    "males": 37,
    "females": 28,
    "dogs": 5
  },
  "hourly_breakdown": {
    "09:00": {"visitors": 10},
    "10:00": {"visitors": 21},
    "11:00": {"visitors": 42}
  }
}
```

---

## üß™ Testing

Run all unit tests:

```bash
pytest tests/
```

---

## üó∫Ô∏è Roadmap

- [x] Video file analysis  
- [ ] Live stream support  
- [ ] Basic demographic tracking  
- [ ] Real-time anomaly detection  
- [ ] Web dashboard integration (next stage)  
- [ ] REST API (FastAPI)  
- [ ] Deployment container (Docker)  

---

## üéØ Target Use Cases

- üè™ **Retail**: Understand customer flow and demographics  
- üè® **Hospitality**: Improve service based on real visitor data  
- üèõÔ∏è **Public Sector**: Monitor and analyze usage of public spaces  
- üêæ **Pet-Friendly Spaces**: Identify non-human traffic too  

---

## ü§ù Contributing

Got ideas? Found bugs? Want to collaborate?  
We welcome contributions!  
Please open an issue or submit a pull request.

---

## üìÑ License

**CC BY-ND 4.0**  

CrowdInsight is licensed under the [Creative Commons Attribution-NoDerivatives 4.0 International License (CC BY-ND 4.0)](https://creativecommons.org/licenses/by-nd/4.0/).

![License: CC BY-ND 4.0](https://img.shields.io/badge/License-CC%20BY--ND%204.0-lightgrey.svg)

---

> Built with ‚ù§Ô∏è to bridge the physical world and data intelligence.
